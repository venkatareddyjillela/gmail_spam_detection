# -*- coding: utf-8 -*-
"""GMAIL SPAM DETECTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FyD7r2jNsFiDB1-CtWjkk4MyRjLwAZLE
"""

!pip install nltk

import numpy as np
import pandas as pd
import nltk

data = pd.read_csv('data.csv', encoding= 'unicode_escape')
data.head()

data['spam'] = data['type'].map({'spam':1,'ham':0}).astype(int)
data.head()

print("columns in data")
for c in data.columns:
  print(c)

l = len(data['type'])
print('no of rows in review column',l)
l = len(data['text'])
print('no of rows in review column',l)

data['text'][1]

def tokenizer(text):
  return text.split()

data['text']  = data['text'].apply(tokenizer)

data.head()

from nltk.stem.snowball import  SnowballStemmer
porter = SnowballStemmer('english',ignore_stopwords=False)

def stem_it(text):
  return [porter.stem(word) for word in text]

data['text'] = data['text'].apply(stem_it)

data['text'][34]

from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
nltk.download('wordnet')

def lemit(text):
  return [lemmatizer.lemmatize(word,pos='a') for word in text]

data['text'] = data['text'].apply(lemit)

data['text'][23]

nltk.download('stopwords')

from nltk.corpus import stopwords
  stop_words = stopwords.words('english')

def stop(text):
  review = [word for word in text if not word in stop_words]
  return review

data['text'] = data['text'].apply(stop)

data.head()

data['text'] = data['text'].apply(' '.join)

data.head()

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()
y = data.spam.values
x = tfidf.fit_transform(data['text'])

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 1,test_size = 0.2,shuffle = False)

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression()
clf.fit(x_train,y_train)
y_pred = clf.predict(x_test)
from sklearn.metrics import accuracy_score
acc_log = accuracy_score(y_pred,y_test)*100
print("accuracy score",acc_log)

from sklearn.svm import LinearSVC
linear_svc = LinearSVC(random_state=0)
linear_svc.fit(x_train,y_train)
y_pred = linear_svc.predict(x_test)
acc_linear_svc = accuracy_score(y_pred,y_test)*100
print("accuracy score",acc_linear_svc)